{"version":3,"sources":["logo.svg","components/Keypad.tsx","components/KeypadsLayout.tsx","containers/handleKeyPress.tsx","containers/CalculatorBox.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Keypad","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","classes","clickHandler","bind","assertThisInitialized","inherits","createClass","key","value","onClick","styles","width","height","fontSize","backgroundColor","indexOf","react_default","a","createElement","ButtonBase","style","href","React","Component","useStyles","makeStyles","theme","root","marginTop","spacing","overflowX","table","tableBody","row","cell","border","input","padding","flex","secondary_input","position","right","opacity","KeypadCell","colSpan","TableCell","className","Keypad_Keypad","KeypadsLayout","Table","TableBody","TableRow","displayValue","top","clipboard","operation","KeypadsLayout_KeypadCell","Big","require","operate","numberOne","numberTwo","one","two","plus","toString","minus","times","alert","div","Error","concat","CalculatorBox","handleClick","keyValue","setState","state","currentVal","result","includes","parseFloat","test","handleKeyPress","Container","maxWidth","Box","boxShadow","KeypadsLayout_KeypadsLayout","appsLink","left","App","Button","variant","color","Hidden","xsDown","Grid","container","direction","justify","alignItems","item","src","logo","alt","textDecoration","CalculatorBox_CalculatorBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4fcec15.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport ButtonBase from '@material-ui/core/ButtonBase';\n\ninterface Props {\n    value: string;\n    onClick: (key: string) => void;\n}\ninterface State {}\n\nexport class Keypad extends React.Component<Props, State> {\n    classes: any;\n\n    constructor(props: Props) {\n        super(props);\n        this.clickHandler = this.clickHandler.bind(this);\n    }\n\n    clickHandler() {\n        this.props.onClick(this.props.value);\n    }\n\n    render() {\n        let operators = [\"=\", \"+\", \"−\", \"×\", \"÷\"];\n        let styles = {\n            width: '100%',\n            height: 67,\n            fontSize: 23,\n            backgroundColor: 'inherit'\n        };\n        if (operators.indexOf(this.props.value) > -1) {\n            styles.backgroundColor = 'orange';\n        }\n        return (\n            <ButtonBase style={styles} onClick={this.clickHandler} href=\"\">\n                {this.props.value}\n            </ButtonBase>\n        );\n    }\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Keypad } from './Keypad';\n\ninterface CellProps {\n    value: string;\n    onClick: (key: string) => void;\n}\ninterface Props {\n    onClick: (key: string) => void;\n    displayValue: string;\n    clipboard: string;\n    operation: string;\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n        marginTop: theme.spacing(3),\n        overflowX: 'auto',\n    },\n    table: {},\n    tableBody: {},\n    row: {},\n    cell: {\n        width: '25%',\n        border: '1px solid #ddd'\n    },\n    input: {\n        padding: 10,\n        flex: 1,\n        width: '100%',\n        fontSize: 47\n    },\n    secondary_input: {\n        position: 'absolute',\n        right: 10,\n        fontSize: 19,\n        opacity: 0.3\n    }\n}));\n\nexport const KeypadCell = (props: CellProps) =>\n{\n    const classes = useStyles();\n    let colSpan = 1;\n    if (props.value === \".\") {\n        colSpan = 2;\n    }\n    return (\n        <TableCell className={classes.cell} colSpan={colSpan}><Keypad value={props.value} onClick={props.onClick} /></TableCell>\n    );\n};\n\nexport const KeypadsLayout = (props: Props) =>\n{\n    const classes = useStyles();\n    return (\n        <Table className={classes.table} padding=\"none\">\n            <TableBody className={classes.tableBody}>\n                <TableRow>\n                    <TableCell className={classes.cell} style={{position: 'relative'}} colSpan={4}>\n                        {/*<InputBase autoFocus className={classes.input} placeholder=\"0\" value={props.displayValue} />*/}\n                        <div className={classes.input}>{props.displayValue}</div>\n                        <span className={classes.secondary_input} style={{top: 10}}>{props.clipboard}</span>\n                        <span className={classes.secondary_input} style={{top: 37}}>{props.operation}</span>\n                    </TableCell>\n                </TableRow>\n                <TableRow>\n                    <KeypadCell onClick={props.onClick} value=\"AC\" />\n                    <KeypadCell onClick={props.onClick} value=\"+/-\" />\n                    <KeypadCell onClick={props.onClick} value=\"%\" />\n                    <KeypadCell onClick={props.onClick} value=\"÷\" />\n                </TableRow>\n                <TableRow>\n                    <KeypadCell onClick={props.onClick} value=\"7\" />\n                    <KeypadCell onClick={props.onClick} value=\"8\" />\n                    <KeypadCell onClick={props.onClick} value=\"9\" />\n                    <KeypadCell onClick={props.onClick} value=\"×\" />\n                </TableRow>\n                <TableRow>\n                    <KeypadCell onClick={props.onClick} value=\"4\" />\n                    <KeypadCell onClick={props.onClick} value=\"5\" />\n                    <KeypadCell onClick={props.onClick} value=\"6\" />\n                    <KeypadCell onClick={props.onClick} value=\"−\" />\n                </TableRow>\n                <TableRow>\n                    <KeypadCell onClick={props.onClick} value=\"1\" />\n                    <KeypadCell onClick={props.onClick} value=\"2\" />\n                    <KeypadCell onClick={props.onClick} value=\"3\" />\n                    <KeypadCell onClick={props.onClick} value=\"+\" />\n                </TableRow>\n                <TableRow>\n                    <KeypadCell onClick={props.onClick} value=\"0\" />\n                    <KeypadCell onClick={props.onClick} value=\".\" />\n                    <KeypadCell onClick={props.onClick} value=\"=\" />\n                </TableRow>\n            </TableBody>\n        </Table>\n    );\n};\n","/**\n * @link https://github.com/ahfarmer/calculator\n */\nconst Big = require('big.js');\n\ninterface State {\n    clipboard: any;\n    currentVal: any;\n    operation: any;\n}\n\nexport function handleKeyPress(state: State, keyValue: string) : any {\n    switch (keyValue) {\n        case \"AC\":\n            return {\n                clipboard: null,\n                currentVal: null,\n                operation: null\n            };\n        case \"%\":\n            if (state.operation && state.currentVal) {\n                const result = operate(state.clipboard, state.currentVal, state.operation);\n                return {\n                    clipboard: Big(result)\n                        .div(Big(\"100\"))\n                        .toString(),\n                    currentVal: null,\n                    operation: null\n                };\n            }\n            if (state.currentVal) {\n                return {\n                    currentVal: Big(state.currentVal)\n                        .div(Big(\"100\"))\n                        .toString()\n                };\n            }\n            return {};\n        case \".\":\n            if (state.currentVal) {\n                // ignore . if the currentVal number already has one\n                if (state.currentVal.includes(\".\")) {\n                    return {};\n                }\n                return { currentVal: state.currentVal + \".\" };\n            }\n            return { currentVal: \"0.\" };\n        case \"=\":\n            if (state.currentVal && state.operation) {\n                return {\n                    clipboard: operate(state.clipboard, state.currentVal, state.operation),\n                    currentVal: null,\n                    operation: null,\n                };\n            } else {\n                // '=' with no operation, nothing to do\n                return {};\n            }\n        case \"+/-\":\n            if (state.currentVal) {\n                return { currentVal: (-1 * parseFloat(state.currentVal)).toString() };\n            }\n            if (state.clipboard) {\n                return { clipboard: (-1 * parseFloat(state.clipboard)).toString() };\n            }\n            return {};\n    }\n\n    if (isNumber(keyValue)) {\n        if (keyValue === \"0\" && state.currentVal === \"0\") {\n            return {};\n        }\n        // If there is an operation, update currentVal\n        if (state.operation) {\n            if (state.currentVal) {\n                return { currentVal: state.currentVal + keyValue };\n            }\n            return { currentVal: keyValue };\n        }\n        // If there is no operation, update currentVal and clear the value\n        if (state.currentVal) {\n            const currentVal = state.currentVal === \"0\" ? keyValue : state.currentVal + keyValue;\n            return {\n                currentVal,\n                clipboard: null,\n            };\n        }\n        return {\n            currentVal: keyValue,\n            clipboard: null,\n        };\n    }\n\n    // Button must be an operation\n\n    // User pressed an operation button and there is an existing operation\n    if (state.operation) {\n        return {\n            clipboard: operate(state.clipboard, state.currentVal, state.operation),\n            currentVal: null,\n            operation: keyValue,\n        };\n    }\n\n    // no operation yet, but the user typed one\n\n    // The user hasn't typed a number yet, just save the operation\n    if (!state.currentVal) {\n        return { operation: keyValue };\n    }\n\n    // save the operation and shift 'currentVal' into 'clipboard'\n    return {\n        clipboard: state.currentVal,\n        currentVal: null,\n        operation: keyValue,\n    };\n}\n\nfunction operate(numberOne: string | null, numberTwo: string | null, operation: string | null) : string {\n    const one = Big(numberOne || \"0\");\n    const two = Big(numberTwo || \"0\");\n    switch (operation) {\n        case \"+\":\n            return one.plus(two).toString();\n        case \"−\":\n            return one.minus(two).toString();\n        case \"×\":\n            return one.times(two).toString();\n        case \"÷\":\n            if (two === \"0\") {\n                alert(\"Divide by 0 error\");\n                return \"0\";\n            } else {\n                return one.div(two).toString();\n            }\n        default:\n            throw Error(`Unknown operation '${operation}'`);\n\n    }\n}\n\nfunction isNumber(str: string) {\n    return /[0-9]+/.test(str);\n}\n","import React from 'react';\nimport Box from \"@material-ui/core/Box\";\nimport { Container } from '@material-ui/core';\n\nimport { KeypadsLayout } from '../components/KeypadsLayout';\nimport { handleKeyPress } from './handleKeyPress';\n\ninterface Props {}\ninterface State {\n    clipboard: any;\n    currentVal: any;\n    operation: any;\n}\n\nexport class CalculatorBox extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            clipboard: null,\n            currentVal: null,\n            operation: null\n        };\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick = (keyValue: string) => {\n        this.setState(handleKeyPress(this.state, keyValue));\n    };\n\n    render() {\n        return (\n            <Container style={{marginTop: 35}} maxWidth=\"xs\">\n                <Box boxShadow=\"1\">\n                    <KeypadsLayout\n                        onClick={this.handleClick}\n                        displayValue={this.state.currentVal || this.state.clipboard || \"0\"}\n                        clipboard={this.state.clipboard}\n                        operation={this.state.operation} />\n                </Box>\n            </Container>\n        );\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Grid, makeStyles} from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Hidden from '@material-ui/core/Hidden';\n\nimport { CalculatorBox } from './containers/CalculatorBox';\n\nconst useStyles = makeStyles(theme => ({\n    appsLink: {\n        position: \"absolute\",\n        left: 25\n    },\n}));\n\nconst App: React.FC = () => {\n    const classes = useStyles();\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <Button href=\"/\" variant=\"contained\" color=\"primary\" className={classes.appsLink}>\n              &#65308; <Hidden xsDown>Back to Apps</Hidden>\n          </Button>\n         <Grid\n              container\n              direction=\"row\"\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n          <Grid item className=\"App-header-container\">\n            <b>ReactJS</b>\n          </Grid>\n          <Grid item className=\"App-logo-container\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </Grid>\n          <Grid item className=\"App-header-container\">\n              <b><a href=\"http://app.shayanys.com\" style={{color: \"white\", textDecoration: \"none\"}}>ShayanYs</a></b>\n          </Grid>\n        </Grid>\n      </header>\n      <div>\n        <CalculatorBox />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
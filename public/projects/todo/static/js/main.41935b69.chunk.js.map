{"version":3,"sources":["TodoItem.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","data-id","todo","id","className","completed","onClick","e","handleClick","text","handleDelete","TodoList","cookies","Cookies","oldTodo","get","state","todoList","count_total","count_incomplete","next_id","new_todo_value","handleNewTodoChange","bind","this","nameInput","focus","date","Date","setTime","getTime","set","path","expires","setState","hasOwnProperty","crossed","setStateCallback","trim","is_completed","event","target","value","preventDefault","addTodo","Object","values","map","key","cross","removeTodo","onSubmit","handleSubmit","type","style","height","onChange","placeholder","ref","input","React","Component","App","CookiesProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.41935b69.chunk.js","sourcesContent":["import React from \"react\";\nimport './TodoItem.css';\n\n\nexport function TodoItem(props) {\n    return <li data-id={props.todo.id} className={props.todo.completed ? 'is-done' : ''}\n        onClick={(e) => props.handleClick(props.todo.id, e)}>\n        <i className={props.todo.completed ? 'completed far fa-check-circle' : 'completed far fa-circle'}></i>\n        {props.todo.text}\n        <button className={\"delete\"} onClick={(e) => props.handleDelete(props.todo.id, e)}>âœ•</button>\n    </li>;\n}\n","import React from 'react';\nimport './TodoList.css';\nimport { Cookies } from 'react-cookie';\nimport { TodoItem } from './TodoItem';\n\nexport class TodoList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.cookies = new Cookies();\n        let oldTodo = this.cookies.get('todo');\n        if (oldTodo) {\n            this.state = oldTodo;\n        } else {\n            this.state = {\n                todoList: {},\n                count_total: 0,\n                count_incomplete: 0,\n                next_id: 0,\n                new_todo_value: ''\n            };\n        }\n\n        this.handleNewTodoChange = this.handleNewTodoChange.bind(this);\n    }\n\n    componentDidMount(){\n        this.nameInput.focus();\n    }\n\n    setStateCallback() {\n        let date = new Date();\n        date.setTime(date.getTime() + (99 * 365 * 24 * 60 * 60 * 1000));\n        this.cookies.set('todo', this.state, { path: '/', expires: date });\n        this.nameInput.focus();\n    }\n\n    cross(id) {\n        this.setState(function(state, props){\n            if (! state.todoList.hasOwnProperty(id)) {\n                return {};\n            }\n            let crossed = !state.todoList[id].completed;\n            state.todoList[id].completed = crossed;\n            return {\n                todoList: state.todoList,\n                count_incomplete: state.count_incomplete + (crossed ?  - 1 : 1)\n            };\n        }, this.setStateCallback);\n    }\n\n    addTodo() {\n        this.setState(function(state, props){\n            // todoList items should not be empty\n            if (state.new_todo_value.trim() === \"\") {\n                return {new_todo_value: ''};\n            }\n\n            state.todoList[state.next_id] = {id: state.next_id, text: state.new_todo_value, completed: false};\n            return {\n                new_todo_value: '',\n                todoList: state.todoList,\n                count_total: state.count_total + 1,\n                count_incomplete: state.count_incomplete + 1,\n                next_id: state.next_id + 1\n            };\n        }, this.setStateCallback);\n    }\n\n    removeTodo(id) {\n        this.setState(function(state, props){\n            if (! state.todoList.hasOwnProperty(id)) {\n                return {};\n            }\n            let is_completed = state.todoList[id].completed;\n            delete state.todoList[id];\n            return {\n                todoList: state.todoList,\n                count_total: state.count_total - 1,\n                count_incomplete: state.count_incomplete + (is_completed ? 0 : -1)\n            };\n        }, this.setStateCallback);\n    }\n\n    handleNewTodoChange(event) {\n        this.setState({new_todo_value: event.target.value});\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.addTodo(event);\n    }\n\n    render() {\n        return (\n            <div className={\"container text-center\"}>\n                <ul className={\"todo-list text-left\"}>\n                  {Object.values(this.state.todoList).map((todo) =>\n                      <TodoItem todo={todo} key={todo.id} handleClick={this.cross.bind(this)} handleDelete={this.removeTodo.bind(this)} />\n                  )}\n                </ul>\n                <form onSubmit={(e) => this.handleSubmit(e)}>\n                    <div className=\"d-flex bd-highlight\">\n                        <div className=\"flex-grow-1 bd-highlight\">\n                            <input type={\"text\"}\n                               className={\"new-todo\"}\n                               style={{height: 35}}\n                               value={this.state.new_todo_value}\n                               onChange={this.handleNewTodoChange}\n                               placeholder={\"Add new item\"}\n                               ref={(input) => { this.nameInput = input; }} />\n                        </div>\n                        <div className=\"bd-highlight\">\n                            <button type={\"submit\"} className={\"btn btn-primary add-button\"}>\n                                <i className=\"fa fa-plus\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n                <hr/>\n                <p>{this.state.count_incomplete} remaining out of {this.state.count_total} tasks</p>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { CookiesProvider } from 'react-cookie';\nimport { TodoList } from './TodoList';\n\nfunction App() {\n  return <CookiesProvider>\n    <TodoList />\n  </CookiesProvider>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Buttons/Buttons.module.scss","components/Metronome/Metronome.module.scss","components/Slider/Slider.module.scss","components/Metronome/speed/actions.ts","metrics.ts","components/Metronome/speed/store.ts","components/Display/Display.tsx","components/Slider/Slider.tsx","components/Buttons/Buttons.tsx","helper.ts","components/AudioPlayer/AudioPlayer.tsx","components/Metronome/Metronome.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","setSpeed","speed","type","value","AUDIO_URL","NOTES","initialState","playing","audio_url","notes_count","current_step","SpeedStore","createStore","state","action","Object","values","indexOf","Display","props","step","getState","subscribe","setState","Grid","container","direction","justify","alignItems","className","styles","Typography","variant","gutterBottom","this","React","Component","Slider","handleChange","bind","event","newValue","setValue","Array","newVal","dispatch","aria-labelledby","valueLabelDisplay","min","max","onChange","Buttons","speedState","handleToneChange","handleNoteChange","url_name","target","note","setNote","spacing","SliderRowWrapper","item","Fab","color","aria-label","onClick","disabled","enableMinus","fontSize","xs","Box","mt","TextField","label","size","SpeedNumberInput","InputLabelProps","shrink","e","parseInt","enablePlus","FormControl","InputLabel","htmlFor","Select","native","inputProps","name","id","defaultValue","keys","map","key","index","component","FormLabel","RadioGroup","row","FormControlLabel","control","Radio","Divider","display","Button","endIcon","toMS","bpm","AudioPlayer","audio","intervalPlayer","speedMS","loaded","playAudio","stop","console","log","newAudio","cloneNode","childNodes","setAttribute","audio_urls","next_index","length","alternateTone","getAttribute","toString","play","alert","clearInterval","start","Date","now","setInterval","tick","ref","onLoad","onEnded","ended","src","remove","Metronome","Fragment","Container","maxWidth","boxShadow","AppBar","position","Toolbar","IconButton","p","FooterBar","href","App","store","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ea6e84a3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SpeedNumberInput\":\"Buttons_SpeedNumberInput__kzHBO\",\"SliderRowWrapper\":\"Buttons_SliderRowWrapper__1_kU8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FooterBar\":\"Metronome_FooterBar__2Sa-X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Slider\":\"Slider_Slider__1ZFiO\"};","/**\n * action types\n */\nexport const SET_SPEED = 'SET_SPEED';\nexport const SPEED_INCREMENT = 'SPEED_INCREMENT';\nexport const SPEED_DECREMENT = 'SPEED_DECREMENT';\nexport const PLAY = 'PLAY';\nexport const STOP = 'STOP';\nexport const SET_TONE = 'SET_TONE';\nexport const SET_NOTES_COUNT = 'SET_NOTES_COUNT';\nexport const STEP_INCREMENT = 'STEP_INCREMENT';\n\n/**\n * action\n */\nexport const setSpeed  = (speed: number) => ({ type: SET_SPEED,       value: speed });\nexport const setTone   = (tone:  string) => ({ type: SET_TONE,        value: tone });\nexport const setNote   = (note:  string) => ({ type: SET_NOTES_COUNT, value: note });\nexport const incSpeed  = () => ({ type: SPEED_INCREMENT });\nexport const decSpeed  = () => ({ type: SPEED_DECREMENT });\nexport const playMetro = () => ({ type: PLAY });\nexport const stopMetro = () => ({ type: STOP });\nexport const step      = () => ({ type: STEP_INCREMENT });\n","export const MAX_BPM = 210;\nexport const MIN_BPM = 40;\n\nexport const MS_PRECISION = 5;\n\nexport const AUDIO_URL: {[key: string]: string} = {\n    \"clock\": \"https://app.shayanys.com/metronome/audio/clock.wav\",\n    \"button18\": \"https://app.shayanys.com/metronome/audio/button18.wav\",\n    \"switch8\": \"https://app.shayanys.com/metronome/audio/switch8.wav\",\n    \"handbag-lock7\": \"https://app.shayanys.com/metronome/audio/handbag-lock7.wav\",\n    \"button10\": \"https://app.shayanys.com/metronome/audio/button10.wav\",\n};\nexport const AUDIO_URL_DEFAULT_KEY = \"clock\";\nexport const AUDIO_URL_DEFAULT = AUDIO_URL[AUDIO_URL_DEFAULT_KEY];\n\nexport const NOTES: {[key: string]: number} = {\n    \"single\":    1,\n    \"half\":      0.5,\n    \"one-third\": 1/3,\n    \"quarter\":   0.25,\n};\n\nexport const NOTES_DEFAULT_KEY = \"quarter\";\nexport const NOTES_DEFAULT = NOTES[NOTES_DEFAULT_KEY];\n\nexport const STEPS_BASE = 1;\n","import {createStore} from \"redux\";\nimport {\n    PLAY,\n    SET_NOTES_COUNT,\n    SET_SPEED,\n    SET_TONE,\n    SPEED_DECREMENT,\n    SPEED_INCREMENT,\n    STEP_INCREMENT,\n    STOP\n} from \"./actions\";\nimport {AUDIO_URL, AUDIO_URL_DEFAULT, MAX_BPM, MIN_BPM, NOTES, NOTES_DEFAULT, STEPS_BASE} from \"../../../metrics\";\n\ninterface ActionType {\n    type: string,\n    value?: any\n}\n\nexport interface StateType {\n    speed: number,\n    playing: boolean,\n    audio_url: string,\n    notes_count: number,\n    current_step: number,\n}\n\nconst initialState: StateType = {\n    speed:        100,\n    playing:      false,\n    audio_url:    AUDIO_URL_DEFAULT,\n    notes_count:  NOTES_DEFAULT,\n    current_step: STEPS_BASE,\n};\n\nfunction reducer(state: StateType = initialState, action: ActionType) : StateType {\n    switch (action.type) {\n        case SET_SPEED:\n            return (MIN_BPM <= action.value && action.value <= MAX_BPM)\n                ? {...state, speed: action.value}\n                : state;\n        case SPEED_INCREMENT:\n            return (state.speed < MAX_BPM)\n                ? {...state, speed: state.speed + 1}\n                : state;\n        case SPEED_DECREMENT:\n            return (MIN_BPM < state.speed)\n                ? {...state, speed: state.speed - 1}\n                : state;\n        case PLAY:\n            return {...state, playing: true, current_step: STEPS_BASE};\n        case STOP:\n            return {...state, playing: false, current_step: STEPS_BASE};\n        case SET_TONE:\n            return (Object.values(AUDIO_URL).indexOf(action.value) > -1)\n                ? {...state, audio_url: action.value}\n                : state;\n        case SET_NOTES_COUNT:\n            return (action.value in NOTES)\n                ? {...state, notes_count: NOTES[action.value]}\n                : state;\n        case STEP_INCREMENT:\n            return (state.current_step < (1 / state.notes_count))\n                ? {...state, current_step: state.current_step + 1}\n                : {...state, current_step: STEPS_BASE};\n        default:\n            return state;\n    }\n}\n\nexport const SpeedStore = createStore(reducer);\n","import React from 'react';\nimport styles from './Display.module.scss';\nimport { SpeedStore } from \"../Metronome/speed/store\";\nimport {Grid, Typography} from \"@material-ui/core\";\n\ninterface DisplayProps {}\n\ninterface DisplayState {\n    step: number\n}\n\nclass Display extends React.Component<DisplayProps, DisplayState> {\n    constructor(props: DisplayProps) {\n        super(props);\n\n        this.state = {\n            step: SpeedStore.getState().current_step,\n        };\n    }\n\n    componentDidMount(): void {\n        SpeedStore.subscribe(() =>\n            this.setState({\n                step: SpeedStore.getState().current_step,\n            })\n        );\n    }\n\n    render() {\n        return <Grid\n            container\n            direction=\"column\"\n            justify=\"center\"\n            alignItems=\"center\"\n            className={styles.Display}\n        >\n            <Typography variant=\"h3\" gutterBottom>\n                {this.state.step}\n            </Typography>\n            {/*<Typography variant=\"caption\" display=\"block\" gutterBottom>*/}\n            {/*    step*/}\n            {/*</Typography>*/}\n        </Grid>\n    }\n}\n\nexport default Display;\n","import React from 'react';\nimport styles from './Slider.module.scss';\nimport {SpeedStore} from \"../Metronome/speed/store\";\nimport {setSpeed} from \"../Metronome/speed/actions\";\nimport {MAX_BPM, MIN_BPM} from \"../../metrics\";\nimport {Slider as MaterialSlider} from '@material-ui/core';\n\nexport interface SliderProps {\n}\n\nexport interface SliderStates {\n    speed: number\n}\n\nclass Slider extends React.Component<SliderProps, SliderStates> {\n    constructor(props: SliderProps) {\n        super(props);\n\n        this.state = {\n            speed: SpeedStore.getState().speed\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount(): void {\n        SpeedStore.subscribe(() =>\n            this.setState({\n                speed: SpeedStore.getState().speed\n            })\n        );\n    }\n\n    handleChange(event: any, newValue: number | number[]): void {\n        this.setValue((newValue instanceof Array) ? newValue[0] : newValue);\n    };\n\n    setValue(newVal: number) {\n        SpeedStore.dispatch(setSpeed(newVal));\n        this.setState({speed: newVal});\n    }\n\n    render() {\n        return <MaterialSlider\n            className={styles.Slider} aria-labelledby=\"continuous-slider\" valueLabelDisplay=\"auto\"\n            min={MIN_BPM} max={MAX_BPM}\n            value={this.state.speed}\n            onChange={this.handleChange}\n        />;\n    }\n}\n\nexport default Slider;\n","import React from 'react';\nimport styles from './Buttons.module.scss';\nimport {SpeedStore} from \"../Metronome/speed/store\";\nimport {decSpeed, incSpeed, playMetro, setNote, setSpeed, setTone, stopMetro} from \"../Metronome/speed/actions\";\nimport {\n    AUDIO_URL,\n    AUDIO_URL_DEFAULT_KEY,\n    MAX_BPM,\n    MIN_BPM,\n    NOTES,\n    NOTES_DEFAULT_KEY\n} from \"../../metrics\";\n\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport {\n    FormControlLabel,\n    Radio,\n    RadioGroup,\n    TextField,\n    Select,\n    Button,\n    FormControl,\n    InputLabel, Fab, Grid, FormLabel, Box, Divider\n} from \"@material-ui/core\";\nimport Slider from \"../Slider/Slider\";\n\ninterface ButtonsState {\n    speed: number,\n    enablePlus: boolean,\n    enableMinus: boolean\n}\n\nclass Buttons extends React.Component<{}, ButtonsState> {\n\n    constructor(props: {}) {\n        super(props);\n\n        this.state = Buttons.speedState(\n            SpeedStore.getState().speed\n        );\n\n        this.handleToneChange = this.handleToneChange.bind(this);\n        this.handleNoteChange = this.handleNoteChange.bind(this);\n    }\n\n    componentDidMount(): void {\n        SpeedStore.subscribe(() =>\n            this.setState(\n                Buttons.speedState(\n                    SpeedStore.getState().speed\n                )\n            )\n        );\n    }\n\n    private static speedState(speed: number) : ButtonsState {\n        return {\n            speed: speed,\n            enablePlus: speed < MAX_BPM,\n            enableMinus: speed > MIN_BPM\n        }\n    }\n\n    handleToneChange(event: React.ChangeEvent<{ value: unknown }>) {\n        const url_name = event.target.value as string;\n        if (url_name in AUDIO_URL) {\n            SpeedStore.dispatch(setTone(AUDIO_URL[url_name]));\n        }\n    }\n\n    handleNoteChange(event: React.ChangeEvent<{ value: unknown }>) {\n        const note = event.target.value as string;\n        SpeedStore.dispatch(setNote(note));\n    }\n\n    render() {\n        return <Grid container className={styles.Buttons}>\n            <Grid container spacing={2} className={styles.SliderRowWrapper}>\n                <Grid item>\n                    <Fab\n                        color=\"primary\" aria-label=\"add\"\n                        onClick={() => SpeedStore.dispatch(decSpeed())}\n                        disabled={!this.state.enableMinus}\n                    >\n                        <RemoveIcon fontSize=\"large\" />\n                    </Fab>\n                </Grid>\n                <Grid item xs>\n                    <Box mt={2}>\n                        <Slider />\n                    </Box>\n                </Grid>\n                <Grid item>\n                    <Box mt={1}>\n                    <TextField\n                        label=\"Speed\" type=\"number\" variant=\"outlined\"\n                        size=\"small\"\n                        className={styles.SpeedNumberInput}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        value={this.state.speed} onChange={e => SpeedStore.dispatch(setSpeed(parseInt(e.target.value)))}\n                    />\n                    </Box>\n                </Grid>\n                <Grid item>\n                    <Fab\n                        color=\"primary\" aria-label=\"add\"\n                        onClick={() => SpeedStore.dispatch(incSpeed())}\n                        disabled={!this.state.enablePlus}\n                    >\n                        <AddIcon fontSize=\"large\" />\n                    </Fab>\n                </Grid>\n            </Grid>\n\n            <Grid\n                container\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing={0}\n            >\n                <Grid item>\n                    <FormControl variant=\"outlined\">\n                        <InputLabel htmlFor=\"tone-select\">Tone</InputLabel>\n                        <Select\n                            native label=\"Tone\"\n                            inputProps={{\n                                name: 'tone',\n                                id: 'tone-select',\n                            }}\n                            onChange={this.handleToneChange} defaultValue={AUDIO_URL_DEFAULT_KEY}\n                        >\n                            {Object.keys(AUDIO_URL).map(\n                                (key, index) => <option value={key} key={index}>{key}</option>\n                            )}\n                        </Select>\n                    </FormControl>\n                </Grid>\n\n                <Grid item>\n                    <FormControl component=\"fieldset\">\n                        <FormLabel component=\"legend\">Note</FormLabel>\n                        <RadioGroup\n                            row aria-label=\"note\" name=\"note\"\n                            defaultValue={NOTES_DEFAULT_KEY}\n                            onChange={this.handleNoteChange}\n                        >\n                            {Object.keys(NOTES).map(\n                                (key, index) =>\n                                    <FormControlLabel value={key} key={index} control={<Radio color=\"primary\" />} label={key} />\n                            )}\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n            </Grid>\n\n            <Divider variant=\"middle\" />\n            <Grid container justify=\"center\" alignItems=\"center\">\n                <Box mt={5}>\n                <Box component=\"span\" display={!SpeedStore.getState().playing ? 'inherit' : 'none'}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        endIcon={<PlayArrowIcon />}\n                        onClick={() => SpeedStore.dispatch(playMetro())} disabled={ SpeedStore.getState().playing}\n                    >\n                        Play\n                    </Button>\n                </Box>\n                <Box component=\"span\" display={ SpeedStore.getState().playing ? 'inherit' : 'none'}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"default\"\n                        endIcon={<PauseIcon />}\n                        onClick={() => SpeedStore.dispatch(stopMetro())} disabled={!SpeedStore.getState().playing}\n                    >\n                        Stop\n                    </Button>\n                </Box>\n                </Box>\n            </Grid>\n\n        </Grid>\n    }\n}\n\nexport default Buttons;\n","import {SpeedStore} from \"./components/Metronome/speed/store\";\nimport {AUDIO_URL} from \"./metrics\";\n\nexport function toMS(bpm: number, note: number) : number\n{\n    return 240000 * note / bpm;\n}\n\nexport const alternateTone    = () => {\n    let audio_urls = Object.values(AUDIO_URL);\n    // next URL in the list (if at the end, the first one)\n    let next_index = (audio_urls.indexOf(SpeedStore.getState().audio_url) + 1) % audio_urls.length;\n    return audio_urls[next_index];\n};\n","import React from 'react';\nimport styles from './AudioPlayer.module.scss';\nimport {MS_PRECISION} from \"../../metrics\";\nimport {SpeedStore} from \"../Metronome/speed/store\";\nimport {alternateTone, toMS} from \"../../helper\";\nimport {step} from \"../Metronome/speed/actions\";\n\ninterface AudioState {\n    speedMS: number,\n    playing: boolean,\n    loaded : boolean,\n    step   : number,\n    note   : number,\n}\n\nclass AudioPlayer extends React.Component<{}, AudioState> {\n    protected audio: any;\n    protected intervalPlayer: any;\n\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            speedMS: toMS(SpeedStore.getState().speed, SpeedStore.getState().notes_count),\n            playing: SpeedStore.getState().playing,\n            loaded : false,\n            step   : SpeedStore.getState().current_step,\n            note   : SpeedStore.getState().notes_count,\n        };\n    }\n\n    componentDidMount(): void {\n        SpeedStore.subscribe(() => {\n            // speed\n            this.setState({\n                speedMS: toMS(SpeedStore.getState().speed, SpeedStore.getState().notes_count),\n                step   : SpeedStore.getState().current_step,\n                note   : SpeedStore.getState().notes_count,\n            });\n\n            // playing\n            if (!this.state.playing && SpeedStore.getState().playing) {\n                this.playAudio();\n            } else if (this.state.playing && !SpeedStore.getState().playing) {\n                this.stop();\n            }\n        });\n    }\n\n    loaded() {\n        console.log(\"loaded\");\n        this.setState({loaded: true});\n    }\n\n    tick() {\n        let newAudio = this.audio.cloneNode(true);\n\n        if (this.state.step >= (1 / this.state.note) && this.state.note !== 1) {\n            newAudio.childNodes[0].setAttribute(\"src\", alternateTone());\n        }\n\n        try {\n            let key = newAudio.getAttribute(\"key\");\n            newAudio.setAttribute(\"key\", (parseInt(key) + 1).toString());\n            newAudio.play();\n            SpeedStore.dispatch(step());\n        } catch (e) {\n            // browser not supported\n            this.stop();\n            alert(\"browser not supported\");\n        }\n    }\n\n    stop() {\n        clearInterval(this.intervalPlayer);\n        this.setState({playing: false});\n    }\n\n    playAudio() {\n        let start = Date.now();\n\n        this.intervalPlayer = setInterval(() => {\n            if (\n                // this.state.loaded &&\n                Date.now() - start > this.state.speedMS - MS_PRECISION\n            ) {\n                start = Date.now();\n                this.tick();\n            }\n        }, MS_PRECISION);\n\n        this.setState({playing: true});\n    }\n\n    static ended(e: any) {\n        e.target.remove();\n    }\n\n    render() {\n        return (\n            <div className={styles.AudioPlayer}>\n                <audio ref={audio => {this.audio = audio}} key={0} onLoad={() => this.loaded()} onEnded={e => AudioPlayer.ended(e)}>\n                    <source src={SpeedStore.getState().audio_url} type=\"audio/mpeg\" >\n                    </source>\n                </audio>\n            </div>\n        );\n    }\n}\n\nexport default AudioPlayer;\n","import React from 'react';\nimport styles from './Metronome.module.scss';\nimport Display from \"../Display/Display\";\nimport Buttons from \"../Buttons/Buttons\";\nimport AudioPlayer from \"../AudioPlayer/AudioPlayer\";\nimport {AppBar, Box, Container, IconButton, Toolbar, Typography} from \"@material-ui/core\";\nimport SpeedIcon from '@material-ui/icons/Speed';\n\nclass Metronome extends React.Component {\n    render() {\n        return (\n            <React.Fragment>\n                <Container maxWidth=\"sm\" className={styles.Metronome}>\n                    <Box boxShadow={1}>\n                        <AppBar position=\"static\">\n                            <Toolbar>\n                                <IconButton color=\"inherit\" aria-label=\"menu\">\n                                    <SpeedIcon />\n                                </IconButton>\n                                <Typography variant=\"h6\">\n                                    Metronome\n                                </Typography>\n                            </Toolbar>\n                        </AppBar>\n                        <Box mt={2} p={2}>\n                            <Buttons />\n                        </Box>\n                        <Box mt={1}>\n                            <Display />\n                        </Box>\n                    </Box>\n                    <AudioPlayer />\n                </Container>\n\n                <Container className={styles.FooterBar}>\n                    <Typography variant=\"body1\">\n                        Designed and developed by <a href=\"https://shayanys.com\">Shayan Ys</a> 2020\n                    </Typography>\n                </Container>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Metronome;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Metronome from \"./components/Metronome/Metronome\";\nimport {SpeedStore} from \"./components/Metronome/speed/store\";\n\nfunction App() {\n    return (\n        <Provider store={SpeedStore}>\n            <Metronome />\n        </Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}